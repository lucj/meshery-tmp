name: Meshery
on:
  push:
    branches:
      - '*'
    tags:
      - 'v*'
  pull_request:
    branches:
      - master

jobs:
  lint:
    name: Check & Review code
    runs-on: ubuntu-latest
    steps:
    - name: Check out code
      uses: actions/checkout@master
      with:
        fetch-depth: 1
    - name: Setup Go
      uses: actions/setup-go@v1
      with:
        go-version: ${{ secrets.GO_VERSION }}
    - run: GOPROXY=direct GOSUMDB=off go get -u github.com/mgechev/revive; /home/runner/go/bin/revive -config revive-lint.toml -formatter friendly ./...
  error_check:
    name: Error check
    runs-on: ubuntu-latest
    steps:
    - name: Check out code
      uses: actions/checkout@master
      with:
        fetch-depth: 1
    - name: Setup Go
      uses: actions/setup-go@v1
      with:
        go-version: ${{ secrets.GO_VERSION }}
    - run: GOPROXY=direct GOSUMDB=off GO111MODULE=on go get -u github.com/kisielk/errcheck; /home/runner/go/bin/errcheck -tags draft ./...
#   static_check:
#     name: Static check
#     runs-on: ubuntu-latest
#     steps:
#     - name: Check out code
#       uses: actions/checkout@master
#       with:
#         fetch-depth: 1
#     - name: Setup Go
#       uses: actions/setup-go@v1
#       with:
#         go-version: ${{ secrets.GO_VERSION }}
#     - run: GOPROXY=direct GOSUMDB=off GO111MODULE=on go get -u honnef.co/go/tools/cmd/staticcheck; /home/runner/go/bin/staticcheck -tags draft -checks all ./... # https://staticcheck.io/docs/checks
#   vet:
#     name: Vet
#     runs-on: ubuntu-latest
#     steps:
#     - name: Check out code
#       uses: actions/checkout@master
#       with:
#         fetch-depth: 1
#     - name: Setup Go
#       uses: actions/setup-go@v1
#       with:
#         go-version: ${{ secrets.GO_VERSION }}
#     - run: GOPROXY=direct GOSUMDB=off GO111MODULE=on go vet -tags draft ./...
#   sec_check:
#     name: Security check
#     runs-on: ubuntu-latest
#     steps:
#     - name: Check out code
#       uses: actions/checkout@master
#       with:
#         fetch-depth: 1
#     - name: Setup Go
#       uses: actions/setup-go@v1
#       with:
#         go-version: ${{ secrets.GO_VERSION }}
#     - run: GOPROXY=direct GOSUMDB=off GO111MODULE=on go get github.com/securego/gosec/cmd/gosec; /home/runner/go/bin/gosec ./... # https://github.com/securego/gosec
#   tests:
#     # needs: [lint, error_check, static_check, vet, sec_check]
#     name: Tests
#     runs-on: ubuntu-latest
#     steps:
#     - name: Check out code
#       uses: actions/checkout@master
#       with:
#         fetch-depth: 1
#     - name: Setup Go
#       uses: actions/setup-go@v1
#       with:
#         go-version: ${{ secrets.GO_VERSION }}
#     - run: GOPROXY=direct GOSUMDB=off GO111MODULE=on go test -tags draft ./...
  build-backend:
    name: Meshery backend build check
    runs-on: ubuntu-latest
    # needs: [lint, error_check, static_check, vet, sec_check, tests]
    steps:
    - name: Check out code
      uses: actions/checkout@master
      with:
        fetch-depth: 1
    - name: Setup Go
      uses: actions/setup-go@v1
      with:
        go-version: ${{ secrets.GO_VERSION }}
    - run: GOPROXY=direct GOSUMDB=off GO111MODULE=on go build -tags draft ./cmd/main.go
  build-ui:
    name: Meshery UI build check
    runs-on: ubuntu-latest
    # needs: [lint, error_check, static_check, vet, sec_check, tests]
    steps:
    - name: Check out code
      uses: actions/checkout@master
      with:
        fetch-depth: 1
    - uses: actions/setup-node@v1
      with:
        node-version: ${{ secrets.NODE_VERSION }}
    - run: |
        cd ui
        npm i
        npm run build && npm run export
  build_release:
    name: MesheryCTL Build & Release
    runs-on: macOS-latest
    # runs-on: ubuntu-latest
    # needs: [lint, error_check, static_check, vet, sec_check, tests]
    steps:
    - name: Check out code
      uses: actions/checkout@master
    - name: Unshallow
      run: git fetch --prune --unshallow
    - name: Set up Go
      uses: actions/setup-go@v1
      with:
        go-version: ${{ secrets.GO_VERSION }}
    - name: goreleaser with tag
      uses: goreleaser/goreleaser-action@v1
      if: success() && startsWith(github.ref, 'refs/tags/')
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_PAT }}
      with:
        version: latest
        args: release --rm-dist --skip-validate
    - name: goreleaser WITHOUT tag
      uses: goreleaser/goreleaser-action@v1
      if: success() && startsWith(github.ref, 'refs/tags/') == false
      with:
        version: latest
        args: release --snapshot --skip-publish --rm-dist
  docker:
    name: Docker build and push
    runs-on: ubuntu-latest
    # needs: [build, build_release]
    steps:
    - name: Check out code
      if: github.event_name != 'pull_request' && (startsWith(github.ref, 'refs/tags/') || github.ref == 'refs/heads/master') && success()
      uses: actions/checkout@master
      with:
        fetch-depth: 1
    - name: Docker login
      if: github.event_name != 'pull_request' && (startsWith(github.ref, 'refs/tags/') || github.ref == 'refs/heads/master') && success()
      uses: azure/docker-login@v1
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    - name: Docker build
      if: github.event_name != 'pull_request' && (startsWith(github.ref, 'refs/tags/') || github.ref == 'refs/heads/master') && success()
      run: |
        DOCKER_BUILDKIT=1 docker build --no-cache -t ${{ secrets.IMAGE_NAME }} --build-arg TOKEN=${{ secrets.GLOBAL_TOKEN }} .
        docker tag ${{ secrets.IMAGE_NAME }}:latest ${{ secrets.IMAGE_NAME }}:$GITHUB_SHA
    - name: Docker tag release
      if: github.event_name != 'pull_request' && startsWith(github.ref, 'refs/tags/') && success()
      run: |
        docker tag ${{ secrets.IMAGE_NAME }}:latest ${{ secrets.IMAGE_NAME }}:${GITHUB_REF:10} # stripping refs/tags/
